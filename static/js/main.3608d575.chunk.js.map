{"version":3,"sources":["utils/storage.js","client.js","utils/auth.js","contexts/AuthContextProvider.js","utils/publicUrl.js","components/PlaylistItem.js","components/Playlists.js","components/Home.js","components/TopSongsItem.js","components/TopSongsChart.js","contexts/TimeframeContextProvider.js","utils/fetch.js","components/TopSongs.js","components/NotAuthenticated.js","contexts/PageContextProvider.js","components/PagePicker.js","components/Navbar.js","components/App.js","serviceWorker.js","index.js"],"names":["storeItem","key","value","window","localStorage","setItem","JSON","stringify","initialState","defaultVal","parse","getItem","scopes","loginRedirectUrl","authQueryString","URLSearchParams","append","client","join","toString","timeout","ms","Promise","resolve","setTimeout","AuthContext","createContext","AuthContextProvider","props","useState","accessToken","setAccessToken","exprDate","setExprDate","userGrantedAccess","setUserGrantedAccess","userIsAuthenticated","currentDate","Date","expirationDate","handleAuthRedirect","location","search","substr","get","hash","token","date","numSecondsUntilExpr","exprDateBuffer","setTime","getTime","auth","parseInt","history","replaceState","authenticateUser","href","a","spotifyLogoutWindow","open","close","useEffect","context","logoutUser","Provider","children","assetPath","process","PlaylistItem","className","src","playlist","images","length","url","publicUrl","alt","onClick","e","playlistName","name","console","log","Playlists","playlists","map","idx","Home","userPlaylists","setUserPlaylists","useContext","params","limit","endpoint","fetch","headers","res","json","data","items","fetchUserPlaylist","TopSongsItem","artistNames","song","artists","artist","rank","popularity","TopSongsChart","songs","adjustContentToFitScreen","windowWidth","innerWidth","document","documentElement","clientWidth","body","songPopularity","querySelector","textContent","onresize","id","TimeframeContext","TimeframeContextProvider","timeframe","setTimeframe","timeframeReadable","setTimeframeReadable","post","method","TopSongs","topSongs","setTopSongs","createPlaylistSuccess","setCreatePlaylistSuccess","playlistId","setPlaylistId","handleCreatePlaylist","spotify","userData","dateOptions","weekday","year","month","day","timeOptions","hour","minute","toLocaleDateString","undefined","currentTime","toLocaleTimeString","description","createPlaylistData","uri","snapshot_id","time_range","topSongsData","fetchTopSongs","NotAuthenticated","PageContext","PageContextProvider","page","setPage","PagePicker","Navbar","styleNavButtons","button","forEach","getElementById","style","color","spotifyGreen","getComputedStyle","getPropertyValue","handleTopSongsNavigation","target","adjustElementsToFitScreen","useLayoutEffect","App","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3608d575.chunk.js","sourcesContent":["export function getItem(key) {\n  return JSON.parse(window.localStorage.getItem(key));\n}\n\nexport function storeItem(key, value) {\n  window.localStorage.setItem(key, JSON.stringify(value));\n}\n\nexport function initialState(key, defaultVal) {\n  if (!defaultVal) defaultVal = '';\n  try { return getItem(key); }\n  catch { return defaultVal; }\n}\n","export default {\n  client_id: \"ede2e752aac9420c8255c01272a9d8ca\",\n  client_secret: \"ed16805939204892bc95f31eb9c9c5b9\",\n  redirect_uri: \"https://bcwebcourse.github.io/creative-project-spotify-manager\"\n}","import client from '../client.js';\n\nconst authEndpoint = \"https://accounts.spotify.com/authorize\";\nconst scopes = ['playlist-modify-public', 'user-read-email', 'user-top-read'];\n\nexport function loginRedirectUrl() {\n  const authQueryString = new URLSearchParams();\n  authQueryString.append('client_id', client.client_id);\n  authQueryString.append('response_type', 'token');\n  authQueryString.append('redirect_uri', client.redirect_uri);\n  authQueryString.append('scope', scopes.join(' '));\n  return `${authEndpoint}?${authQueryString.toString()}`;\n}\n\nexport function createExprDate(numSecondsUntilExpr) {\n  const date = new Date();\n  const exprDateBuffer = numSecondsUntilExpr * 1000;\n  date.setTime(date.getTime() + exprDateBuffer);\n  return date;\n}\n\nexport function timeout(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport function stripHashFragmentFromUrl() {\n  window.history.replaceState(null, null, ' ');\n}\n","import React, { createContext, useState, useEffect } from 'react';\nimport { initialState, storeItem } from '../utils/storage';\nimport * as auth from '../utils/auth';\n\nexport const AuthContext = createContext();\n\nfunction AuthContextProvider(props) {\n  const [accessToken, setAccessToken] = useState(initialState('accessToken'));\n  const [exprDate, setExprDate] = useState(initialState('exprDate'));\n  const [userGrantedAccess, setUserGrantedAccess] = useState(initialState('userGrantedAccess', true));\n\n  function userIsAuthenticated() {\n    const currentDate = new Date();\n    const expirationDate = new Date(exprDate);\n    return accessToken && userGrantedAccess && (currentDate < expirationDate);\n  }\n\n  function handleAuthRedirect() {\n    if (userIsAuthenticated())\n      return;\n    const search = new URLSearchParams(window.location.search.substr(1));\n    if (search.get('error')) {\n      setUserGrantedAccess(false);\n      storeItem('userGrantedAccess', false);\n      return;\n    }\n    const hash = new URLSearchParams(window.location.hash.substr(1));\n    const token = hash.get('access_token');\n    if (token) {\n      const numSecondsUntilExpr = parseInt(hash.get('expires_in'));\n      const date = auth.createExprDate(numSecondsUntilExpr);\n      setAccessToken(token);\n      setExprDate(date);\n      setUserGrantedAccess(true);\n      storeItem('accessToken', token);\n      storeItem('exprDate', date.toString());\n      storeItem('userGrantedAccess', true);\n      auth.stripHashFragmentFromUrl();\n    }  \n  }\n\n  function authenticateUser() {\n    if (userIsAuthenticated()) return;\n    handleAuthRedirect();\n    window.location.href = auth.loginRedirectUrl();\n  }\n\n  async function logoutUser() {\n    storeItem('accessToken', '');\n    storeItem('exprDate', '');\n    storeItem('userGrantedAccess', false);\n    const logoutUrl = 'https://accounts.spotify.com/en/logout';\n    const windowOptions = 'width=100,height=100,top=0,left=0,toolbar=1,location=1,' +\n                         'directories=1,status=1,menubar=1,scrollbars=1';\n    const spotifyLogoutWindow = window.open(logoutUrl, 'Spotify Logout', windowOptions);\n    await auth.timeout(1300);\n    spotifyLogoutWindow.close()\n    window.location.href = auth.loginRedirectUrl();\n  }\n\n  useEffect(authenticateUser, []);\n\n  const context = {\n    accessToken,\n    userGrantedAccess,\n    userIsAuthenticated,\n    authenticateUser,\n    logoutUser\n  };\n\n  return (\n    <AuthContext.Provider value={context}>\n      {props.children}\n    </AuthContext.Provider>\n  );\n}\n\nexport default AuthContextProvider;\n","export default (assetPath) => {\n  return process.env.PUBLIC_URL + assetPath;\n}","import React from 'react';\nimport '../styles/PlaylistItem.css';\nimport publicUrl from '../utils/publicUrl';\n\nfunction PlaylistItem(props) {\n\n  function handlePlayListChange(e, playlistName) {\n      // props.setPage(playlistName);\n      console.log(playlistName);\n  }\n\n  function playlistImage() {\n    if (props.playlist.images.length)\n      return props.playlist.images[0].url;\n    else\n      return publicUrl('/empty-playlist.png');\n  }\n\n  return (\n    <div className=\"playlist-obj\">\n        <img\n          className=\"playlist-thumbnail\"\n          src={playlistImage()}\n          alt=\"playlist\"\n          onClick={e => handlePlayListChange(e, props.playlist.name)}\n        />\n        <p>\n          {props.playlist.name}\n        </p>\n    </div>\n  );\n}\n\nexport default PlaylistItem;\n","import React from 'react';\nimport '../styles/Home.css';\nimport PlaylistItem from './PlaylistItem';\n\nfunction Playlists({ playlists }) {\n  return (\n    <div className=\"playlists\">\n      {playlists.map((playlist, idx) =>\n        <PlaylistItem key={idx} playlist={playlist}/>\n      )}\n    </div>\n  );\n}\n\nexport default Playlists;\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport { AuthContext } from '../contexts/AuthContextProvider';\r\nimport '../styles/Home.css';\r\nimport Playlists from './Playlists';\r\n\r\nfunction Home() {\r\n  const [userPlaylists, setUserPlaylists] = useState([]);\r\n  const { accessToken, authenticateUser } = useContext(AuthContext);\r\n\r\n  useEffect(() => {\r\n    authenticateUser();\r\n    async function fetchUserPlaylist() {\r\n      const params = new URLSearchParams({ limit: 50 });\r\n      const endpoint = `https://api.spotify.com/v1/me/playlists?${params}`;\r\n      const res = await fetch(endpoint, {\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${accessToken}`\r\n        }\r\n      });\r\n      const data = await res.json();\r\n      setUserPlaylists(data.items);\r\n    }\r\n    fetchUserPlaylist();\r\n  }, [accessToken, authenticateUser]);\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <header className=\"home-header\">\r\n        <h1>Welcome to Spotify Manager.</h1>\r\n        <p>\r\n          To see your top songs, use the navigation bar on the left. If you like what you see, \r\n          click \"create playlist\" to generate a new playlist of those songs. Come back here \r\n          to see your new playlist appear below, or open up Spotify to start listening right away.\r\n        </p>\r\n      </header>\r\n      <section className=\"home-body\">\r\n        {userPlaylists.length ? (\r\n        <div>\r\n          <h2 className=\"home-body-header\">Your Playlists</h2>\r\n          <Playlists playlists={userPlaylists} />\r\n        </div>\r\n        ) : \r\n        <h2 className=\"loading-indicator\">Loading...</h2>}\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport '../styles/TopSongsItem.css';\n\nfunction TopSongsItem(props) {\n  const artistNames = props.song.artists.map(artist => artist.name).join(', ');\n\n  return (\n    <div className=\"song-row\">\n      <div className=\"song-ranking\">{props.rank}.</div>\n      <div>{props.song.name}</div>\n      <div className=\"song-artist\">{artistNames}</div>\n      <div className=\"song-popularity\">{props.song.popularity} / 100</div>\n    </div>\n  );\n}\n\nexport default TopSongsItem;","import React, { useEffect } from 'react';\nimport TopSongsItem from './TopSongsItem';\nimport '../styles/TopSongsChart.css';\n\nfunction TopSongsChart({ songs }) {\n\n  function adjustContentToFitScreen() {\n    const windowWidth = window.innerWidth || \n                        document.documentElement.clientWidth ||\n                        document.body.clientWidth;\n    const songPopularity = document.querySelector('#song-popularity');\n    if (windowWidth <= 500)\n      songPopularity.textContent = 'Pop.';\n    else\n      songPopularity.textContent = 'Popularity';\n  }\n\n  useEffect(() => {\n    window.onresize = adjustContentToFitScreen;\n  });\n\n  return (\n    <div className=\"top-songs-chart\">\n      <header className=\"top-songs-chart-header\">\n        <div className=\"song-ranking-placeholder\"></div>\n        <div>Title</div>\n        <div className=\"song-artist\">Artist</div>\n        <div id=\"song-popularity\" className=\"song-popularity\">Popularity</div>\n      </header>\n      {songs.map((song, idx) =>\n        <TopSongsItem key={idx} rank={idx + 1} song={song}/>\n      )}\n    </div>\n  );\n}\n\nexport default TopSongsChart;\n","import React, { createContext, useState } from 'react';\n\nexport const TimeframeContext = createContext();\n\nfunction TimeframeContextProvider(props) {\n  const [timeframe, setTimeframe] = useState('Home');\n  const [timeframeReadable, setTimeframeReadable] = useState('Month');\n  \n  const context = {\n    timeframe, setTimeframe,\n    timeframeReadable, setTimeframeReadable\n  };\n\n  return (\n    <TimeframeContext.Provider value={context}>\n      {props.children}\n    </TimeframeContext.Provider>\n  );\n}\n\nexport default TimeframeContextProvider;","export async function get({ endpoint, accessToken }) {\n  const res = await fetch(endpoint, {\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${accessToken}`\n    }\n  });\n  return await res.json();\n}\n\nexport async function post({ endpoint, accessToken, body }) {\n  const res = await fetch(endpoint, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${accessToken}`\n    },\n    body: JSON.stringify(body)\n  });\n  return await res.json();\n}\n","import React, { useState, useEffect, useContext } from 'react';\nimport TopSongsChart from './TopSongsChart';\nimport { AuthContext } from '../contexts/AuthContextProvider';\nimport { TimeframeContext } from '../contexts/TimeframeContextProvider';\nimport * as spotify from '../utils/fetch';\n\nimport '../styles/TopSongs.css';\n\nfunction TopSongs() {\n  const [topSongs, setTopSongs] = useState([]);\n  const [createPlaylistSuccess, setCreatePlaylistSuccess] = useState(false);\n  const [playlistId, setPlaylistId] = useState('');\n\n  const { accessToken, authenticateUser } = useContext(AuthContext);\n  const { timeframe, timeframeReadable } = useContext(TimeframeContext);\n\n  useEffect(() => {\n    async function fetchTopSongs() {\n      const params = new URLSearchParams({\n        time_range: timeframe,\n        limit: 50\n      });\n      const topSongsData = await spotify.get({\n        endpoint: `https://api.spotify.com/v1/me/top/tracks?${params}`,\n        accessToken\n      });\n      setTopSongs(topSongsData.items);\n    }\n    setCreatePlaylistSuccess(false);\n    authenticateUser();\n    fetchTopSongs();\n  }, [authenticateUser, accessToken, timeframe]);\n\n  function handleNavigateHome() {\n    window.location.href = process.env.PUBLIC_URL;\n  }\n\n  function handleOpenSpotifyPlaylists() {\n    window.open(`https://open.spotify.com/playlist/${playlistId}`);\n  }\n\n  async function handleCreatePlaylist(e) {\n    authenticateUser();\n    const userData = await spotify.get({\n      endpoint: 'https://api.spotify.com/v1/me',\n      accessToken\n    });\n    const date = new Date();\n    const dateOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n    const timeOptions = { hour: '2-digit', minute: '2-digit' };\n    const currentDate = date.toLocaleDateString(undefined, dateOptions);\n    const currentTime = date.toLocaleTimeString([], timeOptions);\n    const createPlaylistData = await spotify.post({\n      endpoint: `https://api.spotify.com/v1/users/${userData.id}/playlists`,\n      accessToken,\n      body: {\n        name: `Top Songs of the Past ${timeframeReadable}`,\n        description: 'This playlist was created for you by Spotify ' + \n                     `Manager on ${currentDate} at ${currentTime}.`\n      }\n    });\n    setPlaylistId(createPlaylistData.id);\n    const addSongsData = await spotify.post({\n      endpoint: `https://api.spotify.com/v1/playlists/${createPlaylistData.id}/tracks`,\n      accessToken,\n      body: topSongs.map(song => song.uri)\n    });\n    if (addSongsData.snapshot_id) setCreatePlaylistSuccess(true);\n  }\n\n  return (\n    <div className=\"top-songs\">\n      {createPlaylistSuccess &&\n        <div className=\"success-message\">\n          Success! Go to the \n          <button className=\"nav-link\" onClick={handleNavigateHome}>Home page</button> \n          or open \n          <button className=\"nav-link\" onClick={handleOpenSpotifyPlaylists}>Spotify</button> \n          to see your new playlist.\n        </div>\n      }\n      <header className=\"top-songs-small-header\">\n        <div className=\"top-songs-small-header-buttons\">\n          <button className=\"spotify-button top-songs-button\">\n            Filter Button\n          </button>\n          <button className=\"spotify-button top-songs-button\" onClick={handleCreatePlaylist}>\n            Create Playlist\n          </button>\n        </div>\n        <h2 className=\"top-songs-title\">Top Songs of the Past {timeframeReadable}</h2>\n      </header>\n      <header className=\"top-songs-large-header\">\n        <button className=\"spotify-button top-songs-button\">\n          Filter Button\n        </button>\n        <h2 className=\"top-songs-title\">Top Songs of the Past {timeframeReadable}</h2>\n        <button className=\"spotify-button top-songs-button\" onClick={handleCreatePlaylist}>\n          Create Playlist\n        </button>\n      </header>\n      {topSongs.length ?\n      <TopSongsChart songs={topSongs} /> :\n      <h2 className=\"loading-indicator\">Loading...</h2>}\n    </div>\n  );\n}\n\nexport default TopSongs;","import React from 'react';\nimport { loginRedirectUrl } from '../utils/auth';\nimport '../styles/NotAuthenticated.css';\n\nfunction NotAuthenticated() {\n  function handleLogin() {\n    window.location.href = loginRedirectUrl();\n  }\n\n  return (\n    <div className=\"not-authenticated\">\n      <h1>Please log in to your Spotify account.</h1>\n      <p>\n        In order to use this web app, you must log in to your Spotify account and grant all the necessary permissions.\n        If it has been more than an hour since you last logged in, you may be asked to do so again.\n      </p>\n      <button className=\"spotify-button login-button\" onClick={handleLogin}>Log in</button>\n    </div>\n  );\n}\n\nexport default NotAuthenticated;\n","import React, { createContext, useState } from 'react';\n\nexport const PageContext = createContext();\n\nfunction PageContextProvider(props) {\n  const [page, setPage] = useState('Home');\n  const context = { page, setPage };\n\n  return (\n    <PageContext.Provider value={context}>\n      {props.children}\n    </PageContext.Provider>\n  );\n}\n\nexport default PageContextProvider;","import React, { useContext } from 'react';\nimport Home from './Home';\nimport TopSongs from './TopSongs';\nimport NotAuthenticated from './NotAuthenticated';\nimport { AuthContext } from '../contexts/AuthContextProvider';\nimport { PageContext } from '../contexts/PageContextProvider';\n\nfunction PagePicker() {\n  const { userIsAuthenticated } = useContext(AuthContext);\n  const { page } = useContext(PageContext);\n\n  if (!userIsAuthenticated())\n    return <NotAuthenticated />\n  \n  switch (page) {\n    case 'Home':\n      return <Home />;\n    case 'TopSongs':\n      return <TopSongs />;\n    default:\n      return <Home />;\n  }\n}\n\nexport default PagePicker;\n","import React, { useContext, useLayoutEffect } from 'react';\nimport { TimeframeContext } from '../contexts/TimeframeContextProvider';\nimport { AuthContext } from '../contexts/AuthContextProvider';\nimport { PageContext } from '../contexts/PageContextProvider';\nimport publicUrl from '../utils/publicUrl';\nimport '../styles/Navbar.css';\n\nfunction Navbar() {\n  const { setTimeframe, setTimeframeReadable } = useContext(TimeframeContext);\n  const { logoutUser } = useContext(AuthContext);\n  const { setPage } = useContext(PageContext);\n\n  useLayoutEffect(() => {\n    const homeButton = document.getElementById('home-button');\n    styleNavButtons(homeButton);\n    window.onresize = adjustElementsToFitScreen;\n  }, []);\n\n  function styleNavButtons(button) {\n    const allNavButtonIds = ['home-button', 'short-term', 'medium-term', 'long-term'];\n    allNavButtonIds.forEach(id => {\n      if (id !== button.id) {\n        const navButton = document.getElementById(id);\n        navButton.style.color = 'white';\n      }\n    });\n    const computedStyles = getComputedStyle(document.body)\n    const spotifyGreen = computedStyles.getPropertyValue('--spotify-green');\n    button.style.color = spotifyGreen;\n  }\n\n  function handleHomeNavigation(e) {\n    styleNavButtons(e.target);\n    setPage('Home');\n  }\n\n  function handleTopSongsNavigation(e, timeframe) {\n    styleNavButtons(e.target);\n    setTimeframe(timeframe);\n    setTimeframeReadable(e.target.value);\n    setPage('TopSongs');\n  }\n\n  function adjustElementsToFitScreen() {\n    const windowWidth = window.innerWidth || \n                        document.documentElement.clientWidth ||\n                        document.body.clientWidth;\n    if (windowWidth <= 370) {\n      const mediumTerm = document.getElementById('medium-term');\n      mediumTerm.textContent = '6 Months';\n      const longTerm = document.getElementById('long-term');\n      longTerm.textContent = 'Years';\n    }\n    else {\n      const mediumTerm = document.getElementById('medium-term');\n      mediumTerm.textContent = 'Six Months';\n      const longTerm = document.getElementById('long-term');\n      longTerm.textContent = 'Few Years';\n    }\n  }\n\n  return (\n    <nav>\n      <header className=\"title\">\n        <img className=\"logo\" src={publicUrl('/favicon.ico')} alt=\"Logo\"/>\n        <h1 className=\"app-title\">Spotify Manager</h1>\n      </header>\n      <section className=\"nav-body\">\n        <button id=\"home-button\" className=\"top-songs-nav-item\" onClick={handleHomeNavigation}>Home</button>\n        <h2 className=\"top-songs-nav-item\">Top Songs of the Past:</h2>\n        <button value=\"Month\" id=\"short-term\" onClick={e => handleTopSongsNavigation(e, 'short_term')}>\n          Month\n        </button>\n        <button value=\"Six Months\" id=\"medium-term\" onClick={e => handleTopSongsNavigation(e, 'medium_term')}>\n          Six Months\n        </button>\n        <button value=\"Few Years\" id=\"long-term\" onClick={e => handleTopSongsNavigation(e, 'long_term')}>\n          Few Years\n        </button>\n        <button className=\"top-songs-nav-item\" onClick={logoutUser}>Logout</button>\n      </section>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from 'react';\nimport PagePicker from './PagePicker';\nimport Navbar from './Navbar';\nimport AuthContextProvider from '../contexts/AuthContextProvider';\nimport PageContextProvider from '../contexts/PageContextProvider';\nimport TimeframeContextProvider from '../contexts/TimeframeContextProvider';\nimport '../styles/App.css';\n\nfunction App() {\n  return (\n    <AuthContextProvider>\n      <PageContextProvider>\n        <TimeframeContextProvider>\n          <div className=\"main\">\n            <Navbar />\n            <div className=\"content\">\n              <PagePicker />\n            </div>\n          </div>\n        </TimeframeContextProvider>\n      </PageContextProvider>\n    </AuthContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}