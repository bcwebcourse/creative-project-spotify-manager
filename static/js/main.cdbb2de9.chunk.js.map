{"version":3,"sources":["utils/storage.js","client.js","utils/auth.js","contexts/AuthContextProvider.js","utils/publicUrl.js","components/PlaylistItem.js","components/Home.js","components/TopSongsItem.js","contexts/TimeframeContextProvider.js","components/TopSongs.js","components/NotAuthenticated.js","contexts/PageContextProvider.js","components/PagePicker.js","components/Navbar.js","components/App.js","serviceWorker.js","index.js"],"names":["storeItem","key","value","window","localStorage","setItem","JSON","stringify","initialState","variable","defaultVal","parse","getItem","scopes","loginRedirectUrl","authQueryString","URLSearchParams","append","client","join","toString","timeout","ms","Promise","resolve","setTimeout","AuthContext","createContext","AuthContextProvider","props","useState","accessToken","setAccessToken","exprDate","setExprDate","userGrantedAccess","setUserGrantedAccess","userIsAuthenticated","currentDate","Date","expirationDate","authenticateUser","location","search","substr","get","hash","token","date","numSecondsUntilExpr","exprDateBuffer","setTime","getTime","createExprDate","parseInt","href","process","a","spotifyLogoutWindow","open","close","useLayoutEffect","context","logoutUser","Provider","children","assetPath","PlaylistItem","playlistName","playlist","name","className","src","images","length","url","publicUrl","alt","onClick","e","console","log","handlePlayListChange","Home","userPlaylists","setUserPlaylists","useContext","fetch","headers","res","json","data","items","fetchUserPlaylist","map","idx","TopSongsItem","songName","song","artistNames","artists","artist","rank","popularity","TimeframeContext","TimeframeContextProvider","timeframe","setTimeframe","timeframeReadable","setTimeframeReadable","TopSongs","topSongs","setTopSongs","createPlaylistSuccess","setCreatePlaylistSuccess","playlistId","setPlaylistId","userRes","userData","dateOptions","weekday","year","month","day","timeOptions","hour","minute","toLocaleDateString","undefined","currentTime","toLocaleTimeString","createPlaylistEndpoint","id","method","body","description","createPlaylistRes","createPlaylistData","songUris","uri","addSongsEndpoint","addSongsRes","addSongsData","snapshot_id","params","time_range","limit","endpoint","fetchTopSongs","NotAuthenticated","PageContext","PageContextProvider","page","setPage","PagePicker","Navbar","styleNavButtons","button","forEach","document","getElementById","style","color","spotifyGreen","getComputedStyle","getPropertyValue","handleTopSongsNavigation","target","innerHTML","App","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cdbb2de9.chunk.js","sourcesContent":["export function getItem(key) {\n  return JSON.parse(window.localStorage.getItem(key));\n}\n\nexport function storeItem(key, value) {\n  window.localStorage.setItem(key, JSON.stringify(value));\n}\n\nexport function initialState(variable, defaultVal) {\n  if (!defaultVal) defaultVal = '';\n  return getItem(variable) || defaultVal;\n}\n","export default {\n  client_id: \"ede2e752aac9420c8255c01272a9d8ca\",\n  client_secret: \"ed16805939204892bc95f31eb9c9c5b9\",\n  redirect_uri: \"https://bcwebcourse.github.io/creative-project-spotify-manager\"\n}","import client from '../client.js';\n\nconst authEndpoint = \"https://accounts.spotify.com/authorize\";\nconst scopes = ['playlist-modify-public', 'user-read-email', 'user-top-read'];\n\nexport function loginRedirectUrl() {\n  const authQueryString = new URLSearchParams();\n  authQueryString.append('client_id', client.client_id);\n  authQueryString.append('response_type', 'token');\n  authQueryString.append('redirect_uri', client.redirect_uri);\n  authQueryString.append('scope', scopes.join(' '));\n  return `${authEndpoint}?${authQueryString.toString()}`;\n}\n\nexport function createExprDate(numSecondsUntilExpr) {\n  const date = new Date();\n  const exprDateBuffer = numSecondsUntilExpr * 1000;\n  date.setTime(date.getTime() + exprDateBuffer);\n  return date;\n}\n\nexport function timeout(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","import React, { createContext, useState, useLayoutEffect } from 'react';\nimport { initialState, storeItem } from '../utils/storage';\nimport { createExprDate, loginRedirectUrl, timeout } from '../utils/auth';\n\nexport const AuthContext = createContext();\n\nfunction AuthContextProvider(props) {\n  const [accessToken, setAccessToken] = useState(initialState('accessToken'));\n  const [exprDate, setExprDate] = useState(initialState('exprDate'));\n  const [userGrantedAccess, setUserGrantedAccess] = useState(initialState('userGrantedAccess', true));\n\n  function userIsAuthenticated() {\n    const currentDate = new Date();\n    const expirationDate = new Date(exprDate);\n    return accessToken && userGrantedAccess && (currentDate < expirationDate);\n  }\n\n  function authenticateUser() {\n    if (userIsAuthenticated())\n      return;\n    const search = new URLSearchParams(window.location.search.substr(1));\n    if (search.get('error')) {\n      setUserGrantedAccess(false);\n      storeItem('userGrantedAccess', false);\n      return;\n    }\n    const hash = new URLSearchParams(window.location.hash.substr(1));\n    const token = hash.get('access_token');\n    if (token) {\n      const numSecondsUntilExpr = parseInt(hash.get('expires_in'));\n      const date = createExprDate(numSecondsUntilExpr);\n      setAccessToken(token);\n      setExprDate(date);\n      setUserGrantedAccess(true);\n      storeItem('accessToken', token);\n      storeItem('exprDate', date.toString());\n      storeItem('userGrantedAccess', true);\n      window.location.href = process.env.PUBLIC_URL;\n      return;\n    }    \n    window.location.href = loginRedirectUrl();\n  }\n\n  async function logoutUser() {\n    storeItem('accessToken', '');\n    storeItem('exprDate', '');\n    storeItem('userGrantedAccess', false);\n    const logoutUrl = 'https://accounts.spotify.com/en/logout';\n    const windowOptions = 'width=100,height=100,top=0,left=0,toolbar=1,location=1,' +\n                         'directories=1,status=1,menubar=1,scrollbars=1';\n    const spotifyLogoutWindow = window.open(logoutUrl, 'Spotify Logout', windowOptions);\n    await timeout(1300);\n    spotifyLogoutWindow.close()\n    window.location.href = loginRedirectUrl();\n  }\n\n  useLayoutEffect(authenticateUser, [accessToken, exprDate, userGrantedAccess]);\n\n  const context = {\n    accessToken,\n    userGrantedAccess,\n    userIsAuthenticated,\n    authenticateUser,\n    logoutUser\n  };\n\n  return (\n    <AuthContext.Provider value={context}>\n      {props.children}\n    </AuthContext.Provider>\n  );\n}\n\nexport default AuthContextProvider;\n","export default (assetPath) => {\n  return process.env.PUBLIC_URL + assetPath;\n}","import React from 'react';\nimport '../styles/PlaylistItem.css';\nimport publicUrl from '../utils/publicUrl';\n\nfunction PlaylistItem(props) {\n  let playlistName = props.playlist.name.substr(0, 25);\n  if (playlistName < props.playlist.name)\n    playlistName += '...';\n\n  function handlePlayListChange(e, playlistName) {\n      // props.setPage(playlistName);\n      console.log(playlistName);\n  }\n\n  function playlistImage() {\n    if (props.playlist.images.length)\n      return props.playlist.images[0].url;\n    else\n      return publicUrl('/empty-playlist.png');\n  }\n\n  return (\n    <div className=\"playlist-obj\">\n        <img\n          className=\"playlist-thumbnail\"\n          src={playlistImage()}\n          alt=\"playlist\"\n          onClick={e => handlePlayListChange(e, props.playlist.name)}\n        />\n        <p>\n          {playlistName}\n        </p>\n    </div>\n  );\n}\n\nexport default PlaylistItem;","import React, { useState, useLayoutEffect, useContext } from 'react';\r\nimport { AuthContext } from '../contexts/AuthContextProvider';\r\nimport '../styles/Home.css';\r\nimport PlaylistItem from './PlaylistItem';\r\n\r\nfunction Home() {\r\n  const [userPlaylists, setUserPlaylists] = useState([]);\r\n  const { accessToken, authenticateUser } = useContext(AuthContext);\r\n\r\n  useLayoutEffect(() => {\r\n    authenticateUser();\r\n    async function fetchUserPlaylist() {\r\n      const endpoint = 'https://api.spotify.com/v1/me/playlists?';\r\n      const res = await fetch(endpoint, {\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${accessToken}`\r\n        }\r\n      });\r\n      const data = await res.json();\r\n      setUserPlaylists(data.items);\r\n    }\r\n    fetchUserPlaylist();\r\n  }, [authenticateUser, accessToken]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"home-header\">\r\n        <h1>Welcome to Spotify Manager.</h1>\r\n        <p>\r\n          To see your top songs, use the navigation bar on the left. If you like what you see, \r\n          click \"create playlist\" to generate a new playlist of those songs. Come back here \r\n          to see your new playlist appear below, or open up Spotify to start listening right away.\r\n        </p>\r\n      </div>\r\n      <h2 className=\"home-section-header\">Your Playlists</h2>\r\n      <div className=\"playlists\">\r\n        {userPlaylists.map((playlist, idx) =>\r\n          <PlaylistItem key={idx} playlist={playlist}/>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport '../styles/TopSongsItem.css';\n\nfunction TopSongsItem(props) {\n  let songName = props.song.name.substr(0, 40);\n  if (songName < props.song.name)\n    songName += '...';\n  const artistNames = props.song.artists.map(artist => artist.name).join(', ');\n\n  return (\n    <div className=\"song-row\">\n      <div className=\"song-ranking\">{props.rank}.</div>\n      <div>{songName}</div>\n      <div>{artistNames}</div>\n      <div className=\"song-popularity\">{props.song.popularity}</div>\n    </div>\n  );\n}\n\nexport default TopSongsItem;","import React, { createContext, useState } from 'react';\n\nexport const TimeframeContext = createContext();\n\nfunction TimeframeContextProvider(props) {\n  const [timeframe, setTimeframe] = useState('Home');\n  const [timeframeReadable, setTimeframeReadable] = useState('Month');\n  \n  const context = {\n    timeframe, setTimeframe,\n    timeframeReadable, setTimeframeReadable\n  };\n\n  return (\n    <TimeframeContext.Provider value={context}>\n      {props.children}\n    </TimeframeContext.Provider>\n  );\n}\n\nexport default TimeframeContextProvider;","import React, { useState, useLayoutEffect, useContext } from 'react';\nimport TopSongsItem from './TopSongsItem';\nimport { AuthContext } from '../contexts/AuthContextProvider';\nimport { TimeframeContext } from '../contexts/TimeframeContextProvider';\n\nimport '../styles/TopSongs.css';\n\nfunction TopSongs() {\n  const [topSongs, setTopSongs] = useState([]);\n  const [createPlaylistSuccess, setCreatePlaylistSuccess] = useState(false);\n  const [playlistId, setPlaylistId] = useState('');\n\n  const { accessToken, authenticateUser } = useContext(AuthContext);\n  const { timeframe, timeframeReadable } = useContext(TimeframeContext);\n\n\n  useLayoutEffect(() => {\n    setCreatePlaylistSuccess(false);\n    authenticateUser();\n    async function fetchTopSongs() {\n      const params = new URLSearchParams({\n        time_range: timeframe,\n        limit: 50\n      });\n      const endpoint = 'https://api.spotify.com/v1/me/top/tracks?' + params;\n      const res = await fetch(endpoint, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${accessToken}`\n        }\n      });\n      const data = await res.json();\n      setTopSongs(data.items);\n    }\n    fetchTopSongs();\n  }, [authenticateUser, accessToken, timeframe]);\n\n  function handleNavigateHome() {\n    window.location.href = process.env.PUBLIC_URL;\n  }\n\n  function handleOpenSpotifyPlaylists() {\n    window.open(`https://open.spotify.com/playlist/${playlistId}`);\n  }\n\n  async function handleCreatePlaylist(e) {\n    const userRes = await fetch('https://api.spotify.com/v1/me', {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    const userData = await userRes.json();\n    const date = new Date();\n    const dateOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n    const timeOptions = { hour: '2-digit', minute: '2-digit' };\n    const currentDate = date.toLocaleDateString(undefined, dateOptions);\n    const currentTime = date.toLocaleTimeString([], timeOptions);\n    const createPlaylistEndpoint = `https://api.spotify.com/v1/users/${userData.id}/playlists`;\n    const createPlaylistRes = await fetch(createPlaylistEndpoint, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${accessToken}`\n      },\n      body: JSON.stringify({\n        name: `Top Songs of the Past ${timeframeReadable}`,\n        description: `This playlist was created for you by Spotify Manager on ${currentDate} at ${currentTime}.`\n      })\n    });\n    const createPlaylistData = await createPlaylistRes.json();\n    console.log(createPlaylistData);\n    await setPlaylistId(createPlaylistData.id);\n    const songUris = topSongs.map(song => song.uri);\n    const addSongsEndpoint = `https://api.spotify.com/v1/playlists/${createPlaylistData.id}/tracks`;\n    const addSongsRes = await fetch(addSongsEndpoint, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${accessToken}`\n      },\n      body: JSON.stringify(songUris)\n    });\n    const addSongsData = await addSongsRes.json();\n    console.log(addSongsData);\n    if (addSongsData.snapshot_id) setCreatePlaylistSuccess(true);\n  }\n\n  return (\n    <div className=\"top-songs\">\n      {createPlaylistSuccess &&\n        <div className=\"success-message\">\n          Success! Go to the \n          <button className=\"nav-link\" onClick={handleNavigateHome}>Home page</button> \n          or open \n          <button className=\"nav-link\" onClick={handleOpenSpotifyPlaylists}>Spotify</button> \n          to see your new playlist.\n        </div>\n      }\n      <header className=\"top-songs-header\">\n        <button className=\"top-songs-button\">\n          Filter Button\n        </button>\n        <h2 className=\"top-songs-title\">Top Songs of the Past {timeframeReadable}</h2>\n        <button className=\"top-songs-button\" onClick={handleCreatePlaylist}>\n          Create Playlist\n        </button>\n      </header>\n      <header className=\"top-songs-charts-header\">\n        <div className=\"song-ranking-placeholder\"></div>\n        <div>Title</div>\n        <div className=\"song-artist\">Artist</div>\n        <div className=\"song-popularity\">Popularity / 100</div>\n      </header>\n      {topSongs.map((song, idx) =>\n        <TopSongsItem key={idx} rank={idx + 1} song={song}/>\n      )}\n    </div>\n  );\n}\n\nexport default TopSongs;","import React from 'react';\nimport { loginRedirectUrl } from '../utils/auth';\nimport '../styles/NotAuthenticated.css';\n\nfunction NotAuthenticated(props) {\n\n  function handleLoginRequest(e) {\n    window.location.href = loginRedirectUrl();\n  }\n\n  return (\n    <div>\n      <h1>Please log in to your Spotify account.</h1>\n      <p>\n        In order to use this web app, you must log in to your Spotify account and grant all the necessary permissions.\n        If it has been more than an hour since you last logged in, you may be asked to do so again.\n      </p>\n      <button onClick={handleLoginRequest}>Log in</button>\n    </div>\n  );\n}\n\nexport default NotAuthenticated;\n","import React, { createContext, useState } from 'react';\n\nexport const PageContext = createContext();\n\nfunction PageContextProvider(props) {\n  const [page, setPage] = useState('Home');\n  const context = { page, setPage };\n\n  return (\n    <PageContext.Provider value={context}>\n      {props.children}\n    </PageContext.Provider>\n  );\n}\n\nexport default PageContextProvider;","import React, { useContext } from 'react';\nimport Home from './Home';\nimport TopSongs from './TopSongs';\nimport NotAuthenticated from './NotAuthenticated';\nimport { AuthContext } from '../contexts/AuthContextProvider';\nimport { PageContext } from '../contexts/PageContextProvider';\n\nfunction PagePicker() {\n  const { userGrantedAccess } = useContext(AuthContext);\n  const { page } = useContext(PageContext);\n\n  if (!userGrantedAccess)\n    return <NotAuthenticated />\n  \n  switch (page) {\n    case 'Home':\n      return <Home />;\n    case 'TopSongs':\n      return <TopSongs />;\n    default:\n      return <Home />;\n  }\n}\n\nexport default PagePicker;\n","import React, { useContext, useLayoutEffect } from 'react';\nimport { TimeframeContext } from '../contexts/TimeframeContextProvider';\nimport { AuthContext } from '../contexts/AuthContextProvider';\nimport { PageContext } from '../contexts/PageContextProvider';\nimport publicUrl from '../utils/publicUrl';\nimport '../styles/Navbar.css';\n\nfunction Navbar() {\n  const { setTimeframe, setTimeframeReadable } = useContext(TimeframeContext);\n  const { logoutUser } = useContext(AuthContext);\n  const { setPage } = useContext(PageContext);\n\n  useLayoutEffect(() => {\n    const homeButton = document.getElementById('home-button');\n    styleNavButtons(homeButton);\n  }, []);\n\n  function styleNavButtons(button) {\n    const allNavButtonIds = ['home-button', 'short-term', 'medium-term', 'long-term'];\n    allNavButtonIds.forEach(id => {\n      if (id !== button.id) {\n        const navButton = document.getElementById(id);\n        navButton.style.color = 'white';\n      }\n    });\n    const computedStyles = getComputedStyle(document.body)\n    const spotifyGreen = computedStyles.getPropertyValue('--spotify-green');\n    button.style.color = spotifyGreen;\n  }\n\n  function handleHomeNavigation(e) {\n    styleNavButtons(e.target);\n    setPage('Home');\n  }\n\n  function handleTopSongsNavigation(e, timeframe) {\n    styleNavButtons(e.target);\n    setTimeframe(timeframe);\n    setTimeframeReadable(e.target.innerHTML);\n    setPage('TopSongs');\n  }\n\n  return (\n    <nav>\n      <div className=\"title\">\n        <img className=\"logo\" src={publicUrl('/favicon.ico')} alt=\"Logo\"/>\n        <h1 className=\"app-title\">Spotify Manager</h1>\n      </div>\n      <button id=\"home-button\" className=\"top-songs-nav-item\" onClick={handleHomeNavigation}>Home</button>\n      <h2 className=\"top-songs-nav-item\">Top Songs of the Past:</h2>\n      <button id=\"short-term\" onClick={e => handleTopSongsNavigation(e, 'short_term')}>\n        Month\n      </button>\n      <button id=\"medium-term\" onClick={e => handleTopSongsNavigation(e, 'medium_term')}>\n        Six Months\n      </button>\n      <button id=\"long-term\" onClick={e => handleTopSongsNavigation(e, 'long_term')}>\n        Few Years\n      </button>\n      <button className=\"top-songs-nav-item\" onClick={logoutUser}>Logout</button>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from 'react';\nimport PagePicker from './PagePicker';\nimport Navbar from './Navbar';\nimport AuthContextProvider from '../contexts/AuthContextProvider';\nimport PageContextProvider from '../contexts/PageContextProvider';\nimport TimeframeContextProvider from '../contexts/TimeframeContextProvider';\nimport '../styles/App.css';\n\nfunction App() {\n  return (\n    <AuthContextProvider>\n      <PageContextProvider>\n        <TimeframeContextProvider>\n          <div className=\"main\">\n            <Navbar />\n            <div className=\"content\">\n              <PagePicker />\n            </div>\n          </div>\n        </TimeframeContextProvider>\n      </PageContextProvider>\n    </AuthContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}